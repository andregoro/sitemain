<!-- saved from url=(0014)about:internet -->
<html>
<head>
<title>[[__title__]]</title>
<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1">
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script type="text/javascript" src="https://www.google.com/jsapi"></script>
<script type="text/javascript">

var _allchartsautomatic_=[];//_ALL_CHARTS_AUTOMATIC_

var nofilter=false;
var chart=null;
var filterIndex=0;
var isValid=false;
var posrow=[[__posrow__]];
var poscol=[[__poscol__]];
var posfilter=[[__posfilter__]];
var measure1=[[__measure1__]];
var measure2=[[__measure2__]];
var measure3=[[__measure3__]];
var thefilter;
var therows;
var thecols;
var firstMember;

var thedata=[
[[##DATA##]]
];
var thelabels = [
[[##LABELS##]]
];

var column = {name:'column',init:InitSimpleChart,draw:DrawColumnChart};
var columndouble = {name:'column_double',init:InitDoubleChart,draw:DrawColumnDoubleChart};
var pie = {name:'pie',init:InitSimpleChart,draw:DrawPieChart};
var bubble = {name:'bubble',init:InitBubbleChart,draw:DrawBubbleChart};

var numberOfDimensions = [[##NUMBEROFDIMENSIONS##]];
var numberOfMeasures = [[##NUMBEROFMEASURES##]];
var columnNames = [[[##COLUMNNAMES##]]];

var typeChart = [[##TYPECHART##]];

google.charts.load("current", {packages:['corechart']});

google.charts.setOnLoadCallback(drawChartInit);
window.onresize = myResize;

function InitSimpleChart()
{
  posfirstmeasure=numberOfDimensions;
  if(numberOfDimensions==1)
  {
    posrow=0;
    nofilter=true;
    posfilter=0;
    isValid=true; 
  }
  else if(numberOfDimensions==2)
  {
    if(posrow==0)
	posfilter=1;
    else if(posrow==1)
	posfilter=0;
    else if(posfilter==0)
      posrow=1;
    else if(posfilter==1)
      posrow=0;
    else
    {
      posrow=0;
      posfilter=1;
    }

    nofilter=false;
    thefilter=thelabels[posfilter];
    isValid=true;
  }

  therows=thelabels[posrow];
}

function InitThreeDimensions()
{
    if(posrow==0)
    {
      if(poscol==1)
        posfilter=2;
      else if(poscol==2)
        posfilter=1;
      else if(posfilter==1)
        poscol=2;
      else if(posfilter==2)
        poscol=1;
      else
      {
        poscol=1;
        posfilter=2;
      }
    }
    else if(posrow==1)
    {
      if(poscol==0)
        posfilter=2;
      else if(poscol==2)
        posfilter=0;
      else if(posfilter==0)
        poscol=2;
      else if(posfilter==2)
        poscol=0;
      else
      {
        poscol=0;
        posfilter=2;
      }
    }
    else if(posrow==2)
    {
      if(poscol==0)
        posfilter=1;
      else if(poscol==1)
        posfilter=0;
      else if(posfilter==0)
        poscol=1;
      else if(posfilter==1)
        poscol=0;
      else
      {
        poscol=0;
        posfilter=1;
      }
    }
    else if(poscol==0)
    {
      if(posfilter==1)
        posrow=2;
      else if(posfilter==2)
        posrow=1;
      else
      {
        posrow=1;
        posfilter=2;
      }
    }
    else if(poscol==1)
    {
      if(posfilter==2)
        posrow=0;
      else if(posfilter==0)
        posrow=2;
      else
      {
        posrow=0;
        posfilter=2;
      }
    }
    else if(poscol==2)
    {
      if(posfilter==1)
        posrow=0;
      else if(posfilter==0)
        posrow=1;
      else
      {
        posrow=0;
        posfilter=1;
      }
    }
    else if(posfilter==0)
    {
      posrow=0;
      posfilter=1; 
    }
    else if(posfilter==1)
    {
      posrow=0;
      poscol=2; 
    }
    else if(posfilter==2)
    {
      posrow=0;
      poscol=1; 
    }
    else
    {
      posrow=0;
      poscol=1;
      posfilter=2; 
    }
}
function InitDoubleChart()
{
  posfirstmeasure=numberOfDimensions;
  if(numberOfDimensions==2)
  {
    if(posrow==0)
	poscol=1;
    else if(posrow==1)
	poscol=0;
    else if(poscol==0)
      posrow=1;
    else if(poscol==1)
      posrow=0;
    else
    {
      posrow=0;
      poscol=1;
    }

    posrow=0;
    poscol=1;
    nofilter=true;
    posfilter=0;
    isValid=true;
  }
  else if(numberOfDimensions==3)
  {
    InitThreeDimensions();

    nofilter=false;
    thefilter=thelabels[posfilter];
    isValid=true;
  }

  therows=thelabels[posrow];
  thecols=thelabels[poscol];
}


function InitBubbleChart()
{
  posfirstmeasure=numberOfDimensions;
  if(numberOfDimensions==1)
  {
    posrow=0;
    nofilter=true;
    posfilter=0;
    isValid=true;
  }
  else if(numberOfDimensions==2)
  {
    if('[[__hasfilter__]]'=='false')
    {
      if(posrow==0)
	poscol=1;
      else if(posrow==1)
	poscol=0;
      else if(poscol==0)
        posrow=1;
      else if(poscol==1)
        posrow=0;
      else
      {
        posrow=0;
        poscol=1;
      }
  
      thecols=thelabels[poscol];
      nofilter=true;
      posfilter=0;
      isValid=true;
    }
    else
    {
      if(posrow==0)
	posfilter=1;
      else if(posrow==1)
	posfilter=0;
      else if(posfilter==0)
        posrow=1;
      else if(posfilter==1)
        posrow=0;
      else
      {
        posrow=0;
        posfilter=1;
      }
  
      nofilter=false;
      thefilter=thelabels[posfilter];
      isValid=true;
    }
  }
  else if(numberOfDimensions==3)
  {
    InitThreeDimensions();

    thecols=thelabels[poscol];

    nofilter=false;
    thefilter=thelabels[posfilter];
    isValid=true;
  }


  therows=thelabels[posrow];
}

function populateTableDouble(mytable)
{
  mytable.addColumn('string', 'Label');

  for(i=0;i<thecols.length;i++)
  {
     mytable.addColumn('number', thecols[i]);
  }

  var nbrows = therows.length;

  mytable.addRows(nbrows);

  for(i=0;i<therows.length;i++)
  {
    mytable.setCell(i,0,i.toString(),therows[i]);
  }

  for(i=0;i<thedata.length;i++)
  {
    if(nofilter || thedata[i][posfilter]==filterIndex)
    {
      mytable.setCell(thedata[i][posrow],thedata[i][poscol]+1,thedata[i][measure1]);
    }
  }
}



function populateTableTwoMeasures(mytable)
{
  mytable.addColumn('string', 'Label');
  mytable.addColumn('number', columnNames[measure1]);
  mytable.addColumn('number', columnNames[measure2]);

  var nbrows = therows.length;
  
  mytable.addRows(nbrows);

  for(i=0;i<therows.length;i++)
  {
    mytable.setCell(i,0,i.toString(),therows[i]);
  }

  for(i=0;i<thedata.length;i++)
  {
    if(nofilter || thedata[i][posfilter]==filterIndex)
    {
      mytable.setCell(thedata[i][posrow],1,thedata[i][measure1]);
      mytable.setCell(thedata[i][posrow],2,thedata[i][measure2]);
    }
  }
}


function populateTable(mytable)
{
    nbrows=therows.length;

    data.addColumn('string', 'Label');
    data.addColumn('number', 'measure');

    var nbrows = therows.length;

    mytable.addRows(nbrows);

    for(i=0;i<therows.length;i++)
    {
      mytable.setCell(i,0,i.toString(),therows[i]);
    }

    for(i=0;i<thedata.length;i++)
    {
      if(nofilter || thedata[i][posfilter]==filterIndex)
      {
        mytable.setCell(thedata[i][posrow],1,thedata[i][measure1]);
      }
    }
}

function populateTableBubble(mytable)
{
  var hasSeries=false;
  if(numberOfDimensions==3 || (numberOfDimensions==2 && '[[__hasfilter__]]'=='false'))
    hasSeries=true;

  mytable.addColumn('string', 'Label');
  mytable.addColumn('number', columnNames[measure1]);
  mytable.addColumn('number', columnNames[measure2]);
  
  if(numberOfDimensions==3 || (numberOfDimensions==2 && '[[__hasfilter__]]'=='false'))
    mytable.addColumn('string', columnNames[poscol]);
  else
    mytable.addColumn('string', 'Serie');

  if(numberOfMeasures>=3)
    mytable.addColumn('number', columnNames[measure3]);
  else
    mytable.addColumn('number', 'bubble');

  var nbrows = 0;

  if(hasSeries)
  {
    for(i=0;i<thedata.length;i++)
    {
      if(nofilter || thedata[i][posfilter]==filterIndex)
      {
        nbrows++;
      }
    }
  }
  else
  {
    nbrows = therows.length;
  }

  mytable.addRows(nbrows);

  if(hasSeries==false)
  {
    for(i=0;i<therows.length;i++)
    {
      data.setCell(i,0,i.toString(),therows[i]);
    }

    for(i=0;i<thedata.length;i++)
    {
      if(nofilter || thedata[i][posfilter]==filterIndex)
      {
        mytable.setCell(thedata[i][posrow],1,thedata[i][measure1]);
        mytable.setCell(thedata[i][posrow],2,thedata[i][measure2]);

        mytable.setCell(thedata[i][posrow],3,'');

        if(numberOfMeasures>=3)
          mytable.setCell(thedata[i][posrow],4,thedata[i][measure3]);
        else
          mytable.setCell(thedata[i][posrow],4,0);
      }
    }
  }
  else
  {
    var c=0;
    for(i=0;i<thedata.length;i++)
    {
      if(nofilter || thedata[i][posfilter]==filterIndex)
      {
        mytable.setCell(c,0,c.toString(),therows[thedata[i][posrow]]);
        mytable.setCell(c,3,thecols[thedata[i][poscol]],thecols[thedata[i][poscol]]);

        mytable.setCell(c,1,thedata[i][measure1]);
        mytable.setCell(c,2,thedata[i][measure2]);

        if(numberOfMeasures>=3)
          mytable.setCell(c,4,thedata[i][measure3]);
        else
          mytable.setCell(c,4,thedata[i][measure3]);

        c++;
      }
    }
  }
}

function DrawBubbleChart()
{
    data = new google.visualization.DataTable();
    
    populateTableBubble(data);

    var mytitle='[[__title__]]';
    if(!nofilter)
    {
      mytitle += '\n';
      mytitle += GetFilterFullName(filterIndex);
    }

    var options = {
        title: mytitle,
        hAxis: {title: columnNames[measure1],viewWindow: {}},
	vAxis: {title: columnNames[measure2],viewWindow: {}},
        bubble: {textStyle: {fontSize: 11,color:'none'},opacity: 0.5},
        legend: {position: 'right'},
        colorAxis: {legend: {position: 'none'}}
     };

    var hasSeries=false;
    if(numberOfDimensions==3 || (numberOfDimensions==2 && '[[__hasfilter__]]'=='false'))
      hasSeries=true;

    if(hasSeries==false)
    {
      //options["legend"]={};
      options["legend"]["position"]='none';
    }

    if(numberOfMeasures<3)
    {
      options["sizeAxis"]={};
      options["sizeAxis"]["maxSize"]=8;
      options["sizeAxis"]["minSize"]=8;
      options["colorAxis"]={};
      options["colorAxis"]["colors"]=['red', 'red'];
    }

    if('[[__haxis_maxvalue__]]'!='')
      options["hAxis"]["viewWindow"]["max"]=parseFloat('[[__haxis_maxvalue__]]');
  
    if('[[__haxis_minvalue__]]'!='')
      options["hAxis"]["viewWindow"]["min"]=parseFloat('[[__haxis_minvalue__]]');

    if('[[__leftaxis_maxvalue__]]'!='')
      options["vAxis"]["viewWindow"]["max"]=parseFloat('[[__leftaxis_maxvalue__]]');
  
    if('[[__leftaxis_minvalue__]]'!='')
      options["vAxis"]["viewWindow"]["min"]=parseFloat('[[__leftaxis_minvalue__]]');

    chart = new google.visualization.BubbleChart(document.getElementById('chart_div'));
    chart.draw(data, options); 
    //google.visualization.events.addListener(chart, 'select', selectHandler);
}

function DrawColumnDoubleChart()
{
    data = new google.visualization.DataTable();

    populateTableDouble(data);

    var mytitle='[[__title__]]';
    if(!nofilter)
    {
      mytitle += '\n';
      mytitle += GetFilterFullName(filterIndex);
    }

    if('[[__bars__]]'=='vertical')
    {
      var options = {
        title: mytitle,
	vAxis: {title: columnNames[measure1]},
        hAxis: {title: columnNames[posrow]},
        isStacked: [[__stacked__]],
        bar: { groupWidth: '75%' }
       };

      chart = new google.visualization.ColumnChart(document.getElementById('chart_div'));
      chart.draw(data, options); 
    }
    else
    {
      var options = {
        title: mytitle,
	hAxis: {title: columnNames[measure1]},
        vAxis: {title: columnNames[posrow]},
        isStacked: [[__stacked__]],
        bar: { groupWidth: '75%' }
       };

      chart = new google.visualization.ColumnChart(document.getElementById('chart_div'));
      chart.draw(data, options); 
    }

    //google.visualization.events.addListener(chart, 'select', selectHandler);
}

function DrawColumnChart() 
{
    data = new google.visualization.DataTable();

    if(numberOfMeasures>=2 && '[[__bars__]]'=='vertical')
      populateTableTwoMeasures(data);
    else
      populateTable(data);

    var mytitle='[[__title__]]';
    if(!nofilter)
    {
      mytitle += '\n';
      mytitle += GetFilterFullName(filterIndex);
    }

    if('[[__bars__]]'=='vertical')
    {
      if(numberOfMeasures>=2)
      {
        var options = {
          title: mytitle,
  	  hAxis: {title: columnNames[posrow]},
 	  vAxes: {0: {title: columnNames[measure1]},1: {title: columnNames[measure2]}},
          series:{0:{targetAxisIndex:0},1:{targetAxisIndex:1}},
          legend: {position: 'top'}
         };

        chart = new google.visualization.ColumnChart(document.getElementById('chart_div'));
        chart.draw(data, options); 
      }
      else
      {
        var options = {
          title: mytitle,
  	  hAxis: {title: columnNames[posrow]},
          vAxis: {title: columnNames[measure1]},
          legend: {position: 'none'}
         };

        chart = new google.visualization.ColumnChart(document.getElementById('chart_div'));
        chart.draw(data, options); 
      }
    }
    else
    {
        var options = {
          title: mytitle,
  	  vAxis: {title: columnNames[posrow]},
          hAxis: {title: columnNames[measure1]},
          legend: {position: 'none'}
         };

        chart = new google.visualization.BarChart(document.getElementById('chart_div'));
        chart.draw(data, options); 

    }

    //google.visualization.events.addListener(chart, 'select', selectHandler);
}

function DrawPieChart() {

    data = new google.visualization.DataTable();

    populateTable(data);

    var mytitle='[[__title__]]';
    if(!nofilter)
    {
      mytitle += '\n';
      mytitle += GetFilterFullName(filterIndex);
    }
    var options = {
        title: mytitle
     };

    chart = new google.visualization.PieChart(document.getElementById('chart_div'));
    chart.draw(data, options); 
    //google.visualization.events.addListener(chart, 'select', selectHandler);
}

function myFunctionNext() {
	redrawChart(1);
}

function myFunctionPrev() {
	redrawChart(-1);
}

function drawChartInit() {

  if(posrow<=0 || posrow>numberOfDimensions)
      posrow=-1;
  else
    posrow--;

  if(poscol<=0 || poscol>numberOfDimensions)
      poscol=-1;
  else
    poscol--;

  if(posfilter<=0 || posfilter>numberOfDimensions)
      posfilter=-1;
  else
    posfilter--;



  if(measure1<=0 || measure1>numberOfMeasures)
    measure1=0;

  if(measure2<=0 || measure2>numberOfMeasures)
    measure2=0;

  if(measure3<=0 || measure3>numberOfMeasures)
    measure3=0;

  for(var m=1;m<=numberOfMeasures;m++)
  {
    if(measure1==0 && m!=measure2 && m!=measure3)
      measure1=m;

    if(measure2==0 && m!=measure1 && m!=measure3)
      measure2=m;

    if(measure3==0 && m!=measure1 && m!=measure2)
      measure3=m;
  }

  if(measure1==0)
      measure1=numberOfDimensions;
  else
    measure1=numberOfDimensions+measure1-1;

  if(measure2==0)
      measure2=numberOfDimensions;
  else
    measure2=numberOfDimensions+measure2-1;

  if(measure3==0)
      measure3=numberOfDimensions;
  else
    measure3=numberOfDimensions+measure3-1;

  if(typeChart.name=='column')
  {
    if(numberOfDimensions==2)
    {
      if('[[__hasfilter__]]'=='false')
        typeChart=columndouble;
    }
    else if(numberOfDimensions==3)
    {
      typeChart=columndouble;
    }
    else if(numberOfDimensions<1 || numberOfDimensions>3)
    {
      document.getElementById("chart_div").innerHTML="Column charts should have one, two or three dimensions"; 
      throw "too many dimensions!";
    }
  }

  if(typeChart.name=='bubble')
  {
    if(numberOfDimensions>3)
    {
      document.getElementById("chart_div").innerHTML="Bubble charts should have one, two or three dimensions"; 
      throw "too many dimensions!";
    }
    if(numberOfMeasures<2)
    {
      document.getElementById("chart_div").innerHTML="Bubble charts should have at least two measures"; 
      throw "too few measures!";
    }
  }
  
  typeChart.init();

  firstMember=0;
  //if('[[__includeallmemberinfilter__]]'=="true")
  //  firstMember=0;

  filterIndex=firstMember;

  displayButtons(); 

  pagerows=0;
  pagecols=0;
  
  typeChart.draw();

}
function redrawChartSimple() {
  redrawChart(1);
}


function redrawChart(delta) {

  var theselection;
  if(chart!=null)
    theselection=chart.getSelection();

  filterIndex+=delta;

  if(delta>0 && filterIndex>=thefilter.length)
    filterIndex=firstMember;

  if(delta<0 && filterIndex<firstMember)
    filterIndex=thefilter.length-1;

  typeChart.draw();
  chart.setSelection(theselection);
}

function myFunctionCloseFilter(index)
{
  var modal = document.getElementById('myModal');
  modal.style.display = "none";
  filterIndex=index;
  redrawChart(0);
}

function displayButtons()
{
  if(_allchartsautomatic_.length<2)
  {
    document.getElementById('btn_menu').style.display = 'none';
  }
  else
  {
    document.getElementById('btn_menu').style.display = 'block';
  }

  if(nofilter || thefilter.length<2)
  {
    document.getElementById('btn_previous').style.display = 'none';
    document.getElementById('btn_next').style.display = 'none';
    document.getElementById('btn_filter').style.display = 'none';
  }
  else
  {
    document.getElementById('btn_previous').style.display = 'block';
    document.getElementById('btn_next').style.display = 'block';
    document.getElementById('btn_filter').style.display = 'block';
  }
}

function mySearchFunction()
{
 myFunctionFilterSearch(document.getElementById("searchbox").value.toLowerCase());
}

function myFunctionFilter()
{
  myFunctionFilterSearch("");
}

function GetFilterFullName(indexfilter)
{
  var filterfullname="";
  var thefilter= thelabels[posfilter];

  if(indexfilter>=0 && indexfilter<thefilter.length)
    filterfullname=thefilter[indexfilter];

  return filterfullname;
}

function myFunctionFilterSearch(str)
{
  if(nofilter)
    return;

  var searchBoxLimit=25;
  var maxResults=100;

  var modalFilter = document.getElementById('myModalFilter');

  var html ="";
  var searchhtml ="";
  if(thefilter.length>searchBoxLimit)
  {
    searchhtml ="<p><input type=text id=\"searchbox\"> <button id=\"searchButton\" onclick=\"mySearchFunction()\">Search</button></p>";
  }
  var c=0;
  for(var f=firstMember;f<thefilter.length;f++)
  {
    var myfiltertree = GetFilterFullName(f);

    if(myfiltertree.toLowerCase().indexOf(str)!= -1)
    {
      var chk="unchecked";
      var p_style="";
      if(f==filterIndex)
      {
        chk="checked";
        p_style= " style=\"border-radius: 5px; color: white; background-color: rgb(92,184,92);\"";
      }

      html = html + "<p" + p_style + "><input type=radio id=filter_rad" + f.toString() + " " +  chk + " onclick=\"javascript:myFunctionCloseFilter(" + f.toString() + ");\"><label for=\"filter_rad" + f.toString() + "\">&nbsp;" + myfiltertree + "</label></p>"; 

      c=c+1;

      if(c>maxResults)
        break;
    }
  }
  
  var stats= "";

  if(thefilter.length>searchBoxLimit)
  {
    stats= "<p style=\"font-size:small;font-style:italic;\">" + c + " / " + (thefilter.length-firstMember) + "</p>";
  }

  modalFilter.innerHTML = searchhtml + stats + html;

  var modal = document.getElementById('myModal');
  modal.style.display = "block";

  if(thefilter.length>searchBoxLimit)
  {
    var searchbox=document.getElementById("searchbox");
    searchbox.addEventListener("keyup", function(event) {
      event.preventDefault();
      if (event.keyCode == 13) {
        document.getElementById("searchButton").click();
      }
    });
    searchbox.value=str;
    searchbox.focus();
  }


  if(thefilter.length<searchBoxLimit)
  {
    document.getElementById("filter_rad" + filterIndex).scrollIntoView(false);
  }

  window.onclick = function(event) {
    if (event.target == modal) {
        modal.style.display = "none";
    }
  }
}

function myResize()
{
//alert("resize");
  redrawChart(0);
}
function removeclass(id,myClass)
{
document.getElementById(id).className =
    document.getElementById(id).className.replace(new RegExp('\\b' + myClass + '\\b'),'');
}

function myFunctionCloseMenu(chart_num)
{
  var chartfile = _allchartsautomatic_[chart_num].filename;
  window.location.href = chartfile;
}

function showmenu()
{
  if(_allchartsautomatic_.length<2)
    return;

  var modal = document.getElementById('myModalMenu');
  modal.style.display = "block";

  var modalContents = document.getElementById('myModalMenuContents');

  var html ="";

  var c=0;
  for(var f=0;f<_allchartsautomatic_.length;f++)
  {
    var chartTitle = _allchartsautomatic_[f].title;

    var chk="unchecked";
    var p_style="";
    var filename = window.location.pathname.substring(window.location.pathname.lastIndexOf('/')+1);
    if(_allchartsautomatic_[f].filename==filename)
    {
      chk="checked";
      p_style= " style=\"border-radius: 5px; color: white; background-color: rgb(92,184,92);\"";
    }

    html = html + "<p" + p_style + "><input type=radio id=menu_rad" + f.toString() + " " +  chk + " onclick=\"javascript:myFunctionCloseMenu(" + f.toString() + ");\"><label for=\"menu_rad" + f.toString() + "\">&nbsp;" + chartTitle + "</label></p>"; 

    c=c+1;
  }


  modalContents.innerHTML = html;

  document.getElementById('menu_rad0').scrollIntoView(false);

  window.onclick = function(event) {
    if (event.target == modal) {
        modal.style.display = "none";
    }
  }
}




</script>

<style>

div.btnfilter {
    display:none;
    position: fixed;
    opacity:0.6;
    top: 0;
    right: 0;
    width: 40px;
    height: 40px;
    border-style: none;
    border-width:1px;
    margin:1;
    background: url("filter.svg") no-repeat;
    background-position: center; 
}

div.btnfilter:hover { opacity: 1;}

.opacity1 { opacity: 0.1;}
.opacity1:hover { opacity: 1;}

.opacity6 { opacity: 0.6;}
.opacity6:hover { opacity: 1;}

div.previous {
    display:none;
    position: fixed;
    bottom: 0;
    left: 0;
    width: 30px;
    height: 40px;
    border-style: none;
    margin: 1;
    opacity:0.6;
    background: url("previous.svg") no-repeat;
    background-position: center; 
    z-index: 1;
}
div.previous:hover { opacity: 1;}
div.next {
    display:none;
    position: fixed;
    bottom: 0;
    right: 0;
    width: 30px;
    height: 40px;
    border-style: none;
    margin: 1;
    opacity:0.6;
    background: url("next.svg") no-repeat;
    background-position: center; 
    z-index: 2;
}
div.next:hover { opacity: 1;}

body {
   margin: 1;
   padding: 0;
}
div.btnmenu {
    display:none;
    position: fixed;
    opacity:0.6;
    top: 0;
    left: 0;
    width: 40px;
    height: 40px;
    border-style: none;
border-width:1px;
    margin:0;
    background: url("menu.svg") no-repeat;
    background-position: center; 

z-index:5;
}

div.btnmenu:hover { opacity: 1;}

.show {display:block;}


/* The Modal (background) */
.modal {
    display: none; /* Hidden by default */
    position: fixed; /* Stay in place */
    z-index: 10; /* Sit on top */
    left: 0;
    top: 0;
    width: 100%; /* Full width */
    height: 100%; /* Full height */
    overflow: auto; /* Enable scroll if needed */
    background-color: rgb(0,0,0); /* Fallback color */
    background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
}

/* Modal Content */
.modal-content {
    position: relative;
    background-color: #fefefe;
    margin-top: 50px;
    margin-bottom: 10px;
    margin-left:auto;
    margin-right:auto;
    border: 1px solid #888;
    border-radius: 8px;
    width: 80%;
    font-family: Arial, Helvetica, sans-serif;
    box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);
}

/* The Close Button */
.close {
    color: white;
    float: right;
    font-size: 28px;
    font-weight: bold;
}

.close:hover,
.close:focus {
    color: #000;
    text-decoration: none;
    cursor: pointer;
}

.modal-header {
    padding: 2px 16px;
    background-color: #5cb85c;
    color: white;
}

.modal-body {padding: 2px 16px;}

.modal-footer {
    padding: 2px 16px;
    background-color: #5cb85c;
    color: white;
}

</style>

</head>
<body>
<div id="chart_div" style="border-style: none;width:100%;height:100%;box-sizing: border-box;"></div>
<div id="btn_menu" class="btnmenu" onclick="javascript:showmenu()"></div>
<div id="myModalMenu" class="modal">
  <div class="modal-content">
    <div class="modal-body" id="myModalMenuContents">
    </diV>
  </div>
</div>
<div id="btn_previous" class="previous" onclick="javascript:myFunctionPrev()"></div>
<div id="btn_next" class="next" onclick="javascript:myFunctionNext()"></div>
<div id="btn_filter" class="btnfilter" onclick="javascript:myFunctionFilter()"></div>
<div id="myModal" class="modal">
  <!-- Modal content -->
  <div class="modal-content">
    <div class="modal-body" id="myModalFilter">
    </div>
  </div>
</div>
</body>
</html>
